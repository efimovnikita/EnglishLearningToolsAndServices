@page "/"
@page "/share"
@using Microsoft.Extensions.Primitives
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<PageTitle>Listen from Youtube</PageTitle>

@code
{
    public string Title { get; set; } = "";
    public string Url { get; set; } = "";
    public string Text { get; set; } = "";
    
    protected override async Task OnInitializedAsync()
    {
        Uri uri = new(NavigationManager.Uri);
        // Extract parameters from the query string.
        Dictionary<string, StringValues>? query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        Title = query.TryGetValue("title", out StringValues title) ? title : "";
        Text = query.TryGetValue("text", out StringValues text) ? text : "";
        Url = query.TryGetValue("url", out StringValues url) ? url : "";

        if (String.IsNullOrEmpty(Text))
        {
            return;
        }

        // Now you can use the shared data.
        // Do the HTTP request to get the audio file
        string audioUrl = $"https://45.146.164.32:5445/api/getAudioFromYoutube?url={Url}";
        HttpResponseMessage audioResponse = await Http.GetAsync(audioUrl);

        if (audioResponse.IsSuccessStatusCode)
        {
            byte[] audioBytes = await audioResponse.Content.ReadAsByteArrayAsync();

            // Convert the byte array to a Blob URL using JavaScript interop
            string blobUrl = await JsRuntime.InvokeAsync<string>("createBlobUrl", audioBytes, "audio/mpeg");

            // Now play the audio file using JS interop
            await JsRuntime.InvokeVoidAsync("playAudio", blobUrl);
        }
        else
        {
            // Handle the error
            Console.WriteLine($"Error: {audioResponse.StatusCode}");
        }
    }
}