@page "/"
@page "/key/{openAiKey}"
@page "/share"

@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using VersOne.Epub
@using System.Text
@using Fb2.Document
@using Fb2.Document.Models
@using Fb2.Document.Models.Base
@using HtmlAgilityPack
@using iText.Kernel.Pdf
@using iText.Kernel.Pdf.Canvas.Parser
@using iText.Kernel.Pdf.Canvas.Parser.Listener
@using YoutubeExplode
@using YoutubeExplode.Videos.ClosedCaptions
@using System.Reflection
@using CliWrap
@using CliWrap.Buffered
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using TiktokenSharp
@inject NavigationManager NavigationManager

<PageTitle>Reader</PageTitle>

@{
    string mainStyle = "mx-auto bg-[#F9FAFB] flex flex-col w-full lg:max-w-[900px] p-2.5 rounded-[15px]";
    if (ShowModal || ShowHistory || ShowSettings)
    {
        mainStyle += " blur";
    }
}
<main class="@mainStyle">
    @if (CurrentPage == null)
    {
        <textarea @bind="RawTextAreaContent" class="resize-none	scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] bg-[#F0F5FF] w-full h-full rounded-[10px] border-dashed border-[1px] border-[#B4C6FC] p-2.5 text-[#374151] text-[16px]"></textarea>
    }
    else
    {
        <div id="content-container" class="scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] flex flex-col gap-[20px] w-full h-full px-2.5 pt-2.5 text-[#374151] text-[18px] leading-6 overflow-auto">
            @foreach (Sentence sentence in CurrentPage.Sentences)
            {
                if (CurrentMode == Mode.Word)
                {
                    List<Token> tokensWithSpaces = sentence.GetTokensWithSpaces();
                    <p>
                        @foreach (Token token in tokensWithSpaces)
                        {
                            if (IsWord(token))
                            {
                                string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                                if (SelectedWord != null && token.Id.Equals(SelectedWord.Id))
                                {
                                    style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                                }
                                <span class="@($"{style} select-none")" @onclick="() => AddWord(token)">@token.Text</span>
                            }
                            else
                            {
                                @token.Text
                            }
                        }
                    </p>
                }
                else
                {
                    string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                    if (SelectedSentences.FirstOrDefault(s => s.Id.Equals(sentence.Id)) != null)
                    {
                        style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                    }

                    <p class="@style" @onclick="() => AddSentence(sentence)">
                        @sentence.ToString()
                    </p>
                }
            }
        </div>
    }
    @if (Pages.Count > 1 && CurrentPage != null)
    {
        <div id="navigation" class="flex justify-center gap-[20px] text-[#374151] text-[18px] pt-1">
            <button
                type="button"
                disabled="@(Pages.FirstOrDefault(page => page.PageNumber == CurrentPage.PageNumber - 1) == null)"
                @onclick="GoBack">
                @("<-")
            </button>
            <div id="pages-counter" class="flex">
                <input class="w-[60px] bg-transparent" type="number" value="@CurrentPage.PageNumber" max="@Pages.Count"
                       @onchange="OnChangePageNumber">
                @("/")
                @Pages.Count
            </div>
            <button
                type="button"
                disabled="@(Pages.FirstOrDefault(page => page.PageNumber == CurrentPage.PageNumber + 1) == null)"
                @onclick="GoNext">
                @("->")
            </button>
        </div>
    }
    <div id="buttons-container" class="flex justify-center items-center mt-2.5 gap-[10px]">
        <ButtonComponent 
            Action="() => ShowSettings = true"
            IconName="settings"
            IsDisabled="false"
            IsLoading="false"/>
        
        @if (CurrentPage == null)
        {
            <div class="file-input-zone">
                <InputFile OnChange="HandleFileSelected" accept=".pdf,.epub,.txt,.fb2,application/pdf,application/epub+zip,text/plain,audio/mpeg,audio/wav" />
            </div>

            <ButtonComponent 
                Action="ProcessText"
                IconName="plus"
                IsDisabled="false"
                IsLoading="@IsLoading"/>
        }
        else
        {
            <ButtonComponent 
                Action="() => ShowHistory = true"
                IconName="history"
                IsDisabled="@(History.Count == 0)"
                IsLoading="false"/>

            string style = "flex items-center justify-start w-[50px] h-[26px] bg-[#6875F5] hover:bg-[#5145CD] rounded-full px-[3px]";
            if (CurrentMode == Mode.Sentence)
            {
                style += " justify-end";
            }
            <button type="button" @onclick="ToggleState" class="flex p-2.5 gap-[10px]">
                <p class="text-[#5850EC]">W</p>
                <div class="@style">
                    <div class="bg-[#E5EDFF] w-[20px] h-[20px] rounded-full"></div>
                </div>
                <p class="text-[#5850EC]">S</p>
            </button>
            
            <ButtonComponent 
                Action="GetDefinitionOrParaphrase" 
                IconName="question" 
                IsDisabled="IsGetDefinitionButtonDisabled" 
                IsLoading="IsLoading" />
        }
    </div>
</main>

@if (ShowModal)
{
    <ModalWindow Title="@Modal.Title" Content="@Modal.TextContent" ModalType="@Modal.ModalType" CloseModal="() => ShowModal = false" />
}

@if (ShowHistory)
{
    <ModalHistoryWindow Title="History" Content="@History" ModalType="ModalType.Regular" CloseModal="() => ShowHistory = false" />
}

@if (ShowSettings)
{
    <ModalSettingsWindow Title="Settings" OpenAiKeyChanged="SetOpenAiKey" Content="@OpenAiKey" ModalType="ModalType.Regular" CloseModal="() => ShowSettings = false" />
}

@code {
    private string RawTextAreaContent { get; set; } = "";
    private List<Page> Pages { get; set; } = new();
    private Page? CurrentPage { get; set; }
    private Mode CurrentMode { get; set; } = Mode.Word;
    private List<Sentence> SelectedSentences { get; set; } = new();
    private Token? SelectedWord { get; set; }
    private string SharedText { get; set; } = "";
    [Parameter] public string? OpenAiKey { get; set; }
    private bool IsGetDefinitionButtonDisabled
    {
        get {
            if (CurrentPage == null)
            {
                return true;
            }

            if (IsLoading)
            {
                return true;
            }

            if (SelectedWord == null && SelectedSentences.Count == 0)
            {
                return true;
            }

            return false;
        }
    }

    private bool ShowModal { get; set; }
    private bool ShowHistory { get; set; }
    private bool ShowSettings { get; set; }
    private bool IsLoading { get; set; }
    
    private Modal Modal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (OpenAiKey != default)
        {
            await SetOpenAiKey(OpenAiKey);
        }
        
        // Get data from local storage
        string inputData = await LocalStorage.GetItemAsync(LocalStorageInputName);
        string key = await LocalStorage.GetItemAsync(LocalStorageKeyName);
        
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        Dictionary<string, StringValues> query = QueryHelpers.ParseQuery(uri.Query);

        SharedText = query.TryGetValue("text", out StringValues text) ? text : "";
        RawTextAreaContent = string.IsNullOrWhiteSpace(SharedText) == false ? SharedText : inputData;
        OpenAiKey = key;
    }
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        string extension = Path.GetExtension(file.Name);
        if (extension.Contains("epub"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                EpubBook book = await EpubReader.ReadBookAsync(memoryStream);
                RawTextAreaContent = "";
                foreach (EpubTextContentFile textContentFile in book.ReadingOrder)
                {
                    HtmlDocument htmlDocument = new();
                    htmlDocument.LoadHtml(textContentFile.Content);
                    StringBuilder sb = new();
                    foreach (HtmlNode node in htmlDocument.DocumentNode.SelectNodes("//text()"))
                    {
                        sb.AppendLine(node.InnerText.Trim());
                    }
                    string contentText = sb.ToString();
                    RawTextAreaContent += contentText;
                }
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
        
        if (extension.Contains("pdf"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                PdfReader reader = new(memoryStream);
                PdfDocument pdfDocument = new(reader);
                
                StringBuilder content = new();

                RawTextAreaContent = "";

                int pages = pdfDocument.GetNumberOfPages();
                for (int i = 1; i <= pages; i++)
                {
                    PdfPage? page = pdfDocument.GetPage(i);
                    string? text = PdfTextExtractor.GetTextFromPage(page, new SimpleTextExtractionStrategy());
                    content.AppendLine(text);
                }

                RawTextAreaContent = content.ToString();
                
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
        
        if (extension.Contains("txt"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                RawTextAreaContent = "";
                
                using StreamReader reader = new(memoryStream, Encoding.UTF8);
                string content = await reader.ReadToEndAsync();

                RawTextAreaContent = content;
                
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
        
        if (extension.Contains("fb2"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                RawTextAreaContent = "";
                
                Fb2Document fb2Document = new();
                
                fb2Document.Load(memoryStream);

                StringBuilder sb = new();
                foreach (BookBody body in fb2Document.Bodies)
                {
                    foreach (Fb2Node node in body.Content)
                    {
                        string? s = node.ToString();
                        if (String.IsNullOrWhiteSpace(s) == false)
                        {
                            sb.AppendLine(s);
                        }
                    }
                }

                RawTextAreaContent = sb.ToString();

                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }

        if (extension.Contains("mp3") || extension.Contains("wav"))
        {
            IsLoading = true;

            Assembly currentAssembly = Assembly.GetExecutingAssembly();
            string audioFilePath = $"{new FileInfo(currentAssembly.Location).Directory!.FullName}/{Guid.NewGuid()}{extension}";
            
            try
            {
                if (String.IsNullOrWhiteSpace(OpenAiKey))
                {
                    throw new Exception("You must provide OpenAI API key (https://platform.openai.com/account/api-keys). Open settings and add the key.");
                }
                
                // Save the file to the temporary location
                await using FileStream fileStream = new(audioFilePath, FileMode.Create);
                await file.OpenReadStream(30000000).CopyToAsync(fileStream);

                RawTextAreaContent = await TranscribeAudio(audioFilePath);
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                DeleteTempFile();
            }
            
            DeleteTempFile();

            void DeleteTempFile()
            {
                // Delete the temporary file
                File.Delete(audioFilePath);

                IsLoading = false;
            }
        }
    }

    private List<Token> History
    {
        get
        {
            var result = new List<Token>();
            foreach (Page page in Pages)
            {
                foreach (Sentence sentence in page.Sentences)
                {
                    result.AddRange(sentence.Tokens.Where(token => !String.IsNullOrWhiteSpace(token.Definition)));
                }
            }

            return result;
        }
    }
    
    private void ToggleState()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        CurrentMode = CurrentMode == Mode.Sentence ? Mode.Word : Mode.Sentence;
    }

    private static bool IsWord(Token token) => Regex.IsMatch(token.Text, @"^[A-Za-z-'’]+$");

    private async Task ProcessText()
    {
        try
        {
            IsLoading = true;

            SelectedWord = null;
            SelectedSentences.Clear();
            CurrentPage = null;
            Pages.Clear();
            
            // process URL's
            string? url = ExtractUrl(RawTextAreaContent);
            if (String.IsNullOrEmpty(url) == false)
            {
                string textContentFromUrlAsync = await ExtractTextContentFromUrlAsync(url);
                if (String.IsNullOrEmpty(textContentFromUrlAsync) == false)
                {
                    RawTextAreaContent = textContentFromUrlAsync;
                }
            }
            
            // Add to local storage
            await LocalStorage.SetItemAsync(LocalStorageInputName, RawTextAreaContent);

            if (String.IsNullOrWhiteSpace(RawTextAreaContent))
            {
                return;
            }

            java.io.InputStream sentenceModelIn = new java.io.FileInputStream("opennlp-en-ud-ewt-sentence-1.0-1.9.3.bin");
            java.io.InputStream tokensModelIn = new java.io.FileInputStream("opennlp-en-ud-ewt-tokens-1.0-1.9.3.bin");
            SentenceModel sentenceModel = new(sentenceModelIn);
            TokenizerModel tokenizerModel = new(tokensModelIn);
            SentenceDetectorME sentenceDetector = new(sentenceModel);
            Tokenizer tokenizer = new TokenizerME(tokenizerModel);

            string[] sentences = sentenceDetector.sentDetect(RawTextAreaContent);
            
            List<Sentence> sentencesList = new();
            foreach (string sentence in sentences)
            {
                string[]? tokens = tokenizer.tokenize(sentence);
                Sentence sentenceObj = new() { Id = Guid.NewGuid(), Tokens = new List<Token>() };
                foreach (string token in tokens)
                {
                    sentenceObj.Tokens.Add(new Token { Id = Guid.NewGuid(), SentenceId = sentenceObj.Id, Text = token });
                }

                sentencesList.Add(sentenceObj);
            }
            
            List<List<Sentence>> chunks = SplitIntoChunks(sentencesList, 30);
            for (var i = 0; i < chunks.Count; i++)
            {
                Pages.Add(new Page {Sentences = chunks[i], PageNumber = i + 1});
            }

            CurrentPage = Pages.First();
            
            IsLoading = false;
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    public async Task<string> ExtractTextContentFromUrlAsync(string? url)
    {
        if (string.IsNullOrWhiteSpace(url))
        {
            throw new ArgumentException("URL cannot be null or empty.", nameof(url));
        }

        using HttpClient httpClient = new();
        HttpResponseMessage response = await httpClient.GetAsync(url);

        if (!response.IsSuccessStatusCode)
        {
            throw new HttpRequestException($"Request to {url} failed with status code {response.StatusCode}.");
        }

        string htmlContent = await response.Content.ReadAsStringAsync();
        HtmlDocument htmlDocument = new();
        htmlDocument.LoadHtml(htmlContent);

        HtmlNode? bodyNode = htmlDocument.DocumentNode.SelectSingleNode("//body");
        if (bodyNode == null)
        {
            throw new InvalidOperationException("The web page doesn't have a body tag.");
        }

        if (IsUrlFromTheGuardian(url))
        {
            return ExtractTextFromGuardian(bodyNode);
        }
        
        if (IsUrlFromBbc(url))
        {
            return ExtractTextFromBbc(bodyNode);
        }
        
        if (IsUrlFromWashingtonPost(url))
        {
            return ExtractTextFromWashingtonPost(bodyNode);
        }
        
        if (IsUrlFromYouTube(url))
        {
            if (String.IsNullOrWhiteSpace(OpenAiKey))
            {
                throw new Exception("You must provide OpenAI API key (https://platform.openai.com/account/api-keys). Open settings and add the key.");
            }
            return await ExtractTextFromYouTube(url);
        }

        return ExtractTextFromNode(bodyNode);
    }

    private static bool IsUrlFromTheGuardian(string url)
    {
        Uri uri = new(url);
        return uri.Host.Contains("theguardian.com");
    }
    
    private static bool IsUrlFromBbc(string url)
    {
        Uri uri = new(url);
        return uri.Host.Contains("bbc.com");
    }
    
    private static bool IsUrlFromYouTube(string url)
    {
        Uri uri = new(url);
        return uri.Host.Contains("youtu.be") || uri.Host.Contains("youtube.com");
    }
    
    private static bool IsUrlFromWashingtonPost(string url)
    {
        Uri uri = new(url);
        return uri.Host.Contains("washingtonpost.com");
    }
    
    private static string ExtractTextFromWashingtonPost(HtmlNode node)
    {
        StringBuilder extractedText = new();

        HtmlNodeCollection? headlineNodes = node.SelectNodes("//h1[@data-qa='headline']");
        HtmlNodeCollection? bodyNodes = node.SelectNodes("//div[@data-qa='article-body']");

        if (headlineNodes != null)
        {
            foreach (HtmlNode? headlineNode in headlineNodes)
            {
                extractedText.AppendLine(ExtractTextFromNode(headlineNode));
            }
        }

        if (bodyNodes != null)
        {
            foreach (HtmlNode? n in bodyNodes)
            {
                extractedText.AppendLine(ExtractTextFromNode(n));
            }
        }

        return extractedText.ToString().Trim();
    }
    
    private async Task<string> ExtractTextFromYouTube(string url)
    {
        YoutubeClient youtube = new();

        ClosedCaptionManifest trackManifest = await youtube.Videos.ClosedCaptions.GetManifestAsync(url);

        trackManifest.GetByLanguage("en");

        Assembly currentAssembly = Assembly.GetExecutingAssembly();
        string audioFilePath = $"{new FileInfo(currentAssembly.Location).Directory!.FullName}/{Guid.NewGuid()}.mp3";

        string result = "";
        try
        {
            await Cli.Wrap("chmod")
                .WithArguments("u+x \"yt-dlp_linux\"")
                .ExecuteAsync();
            
            string arguments =
                $"-c \"./yt-dlp_linux -x --audio-format mp3 -o {audioFilePath} '{url}'\"";

            Command cmd = Cli.Wrap("/bin/bash")
                .WithArguments(arguments);

            await cmd.ExecuteBufferedAsync();

            result = await TranscribeAudio(audioFilePath);

            DeleteTempAudio(audioFilePath);

            return result;
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            DeleteTempAudio(audioFilePath);
        }
        
        return result;
    }

    private static void DeleteTempAudio(string audioFilePath)
    {
        if (File.Exists(audioFilePath))
        {
            File.Delete(audioFilePath);
        }
    }

    private async Task<string> TranscribeAudio(string fileName)
    {
        HttpClient client = new();
        
        ByteArrayContent byteArrayContent = new(File.ReadAllBytes(fileName));
        byteArrayContent.Headers.Remove("Content-Type");
        byteArrayContent.Headers.TryAddWithoutValidation("Content-Type", "application/octet-stream");
        
        StringContent modelContent = new("whisper-1");

        using MultipartFormDataContent formData = new();
        formData.Add(byteArrayContent, "file", Path.GetFileName(fileName));
        formData.Add(modelContent, "model");

        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {OpenAiKey}");

        HttpResponseMessage response = await client.PostAsync("https://api.openai.com/v1/audio/transcriptions", formData);
        response.EnsureSuccessStatusCode();
        string responseString = await response.Content.ReadAsStringAsync();

        JObject? jsonResponse = JsonConvert.DeserializeObject<JObject>(responseString);
        if (jsonResponse == null)
        {
            throw new Exception("Error when trying to get transcript from audio");
        }

        string text = jsonResponse["text"]!.Value<string>() ?? "";

        return text;
    }

    private static string ExtractTextFromGuardian(HtmlNode node)
    {
        StringBuilder extractedText = new();

        HtmlNodeCollection? headlineNodes = node.SelectNodes("//div[@data-gu-name='headline']");
        HtmlNodeCollection? standfirstNodes = node.SelectNodes("//div[@data-gu-name='standfirst']");
        HtmlNodeCollection? bodyNodes = node.SelectNodes("//div[@data-gu-name='body']");

        if (headlineNodes != null)
        {
            foreach (HtmlNode? headlineNode in headlineNodes)
            {
                extractedText.AppendLine(ExtractTextFromNode(headlineNode));
            }
        }

        if (standfirstNodes != null)
        {
            foreach (HtmlNode? standfirstNode in standfirstNodes)
            {
                extractedText.AppendLine(ExtractTextFromNode(standfirstNode));
            }
        }
        
        if (bodyNodes != null)
        {
            foreach (HtmlNode? n in bodyNodes)
            {
                extractedText.AppendLine(ExtractTextFromNode(n));
            }
        }

        return extractedText.ToString().Trim();
    }
    
    private static string ExtractTextFromBbc(HtmlNode node)
    {
        StringBuilder extractedText = new();

        HtmlNodeCollection? mainNodes = node.SelectNodes("//*[@id='main-content']");

        if (mainNodes != null)
        {
            foreach (HtmlNode? htmlNode in mainNodes)
            {
                extractedText.AppendLine(ExtractTextFromNode(htmlNode));
            }
        }

        return extractedText.ToString().Trim();
    }

    private static string ExtractTextFromNode(HtmlNode? node)
    {
        if (node == null)
        {
            return string.Empty;
        }

        if (node.NodeType == HtmlNodeType.Text)
        {
            return node.InnerText.Trim();
        }

        // Skip script nodes and style nodes
        if (node.Name.Equals("script", StringComparison.OrdinalIgnoreCase) ||
            node.Name.Equals("style", StringComparison.OrdinalIgnoreCase))
        {
            return string.Empty;
        }

        // Remove inline CSS
        if (node.HasAttributes && node.Attributes.Contains("style"))
        {
            node.Attributes.Remove("style");
        }

        var extractedText = new StringBuilder();

        foreach (var childNode in node.ChildNodes)
        {
            extractedText.AppendLine(ExtractTextFromNode(childNode));
        }

        return extractedText.ToString().Trim();
    }
    
    public static string? ExtractUrl(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return null;
        }

        string pattern = @"^(https?|ftp|file):\/\/[-A-Za-z0-9+&@#\/%?=~_|!:,.;]*[-A-Za-z0-9+&@#\/%=~_|]";
        Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);
        Match match = regex.Match(input);

        return match.Success ? match.Value : null;
    }

    private static List<List<T>> SplitIntoChunks<T>(List<T> list, int chunkSize)
    {
        List<List<T>> chunks = new List<List<T>>();
        int count = list.Count;

        for (int i = 0; i < count; i += chunkSize)
        {
            List<T> chunk = list.Skip(i).Take(chunkSize).ToList();
            chunks.Add(chunk);
        }

        return chunks;
    }

    private void AddWord(Token token)
    {
        if (SelectedWord != null && SelectedWord.Id.Equals(token.Id))
        {
            SelectedWord = null;
            return;
        }

        SelectedWord = token;
    }
    
    private void AddSentence(Sentence sentence)
    {
        Sentence[] sentencesWithSameId = SelectedSentences.Where(s => s.Id.Equals(sentence.Id)).ToArray();
        if (sentencesWithSameId.Length != 0)
        {
            foreach (Sentence s in sentencesWithSameId)
            {
                SelectedSentences.Remove(s);
            }
            
            return;
        }

        SelectedSentences.Add(sentence);
    }

    private async Task GetDefinitionOrParaphrase()
    {
        IsLoading = true;

        try
        {
            if (CurrentPage == null)
            {
                return;
            }

            if (String.IsNullOrWhiteSpace(OpenAiKey))
            {
                Modal.Title = "Warning";
                Modal.TextContent = "You must provide OpenAI API key (https://platform.openai.com/account/api-keys). Open settings and add the key.";
                Modal.ModalType = ModalType.Warning;
                ShowModal = true;

                return;
            }
            
            OpenAIAPI api = new(OpenAiKey);
            Conversation? chat = api.Chat.CreateConversation();
            
            if (CurrentMode == Mode.Word && SelectedWord != null)
            {
                if (String.IsNullOrWhiteSpace(SelectedWord.Definition) == false)
                {
                    Modal.Title = "Definition";
                    Modal.TextContent = SelectedWord.Definition;
                    Modal.ModalType = ModalType.Regular;
                    ShowModal = true;
                    return;
                }

                RequestManager requestManager = new(Pages, SelectedWord);

                string request = requestManager.GetBaseRequestForWord();
                string synonymsRequest = requestManager.GetSynonymsRequestForWord();

                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                chat = api.Chat.CreateConversation();
                chat.AppendUserInput(synonymsRequest);
                string synonymsResponse = await chat.GetResponseFromChatbotAsync();

                SelectedWord.Definition = $"{response}";
                SelectedWord.Definition += $"\n{synonymsResponse}";

                Modal.Title = "Definition";
                Modal.TextContent = SelectedWord.Definition;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
            else
            {
                TikToken tikToken = TikToken.EncodingForModel("gpt-3.5-turbo");
                string request = RequestManager.GetRequestForSentences(tikToken, SelectedSentences);

                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                Modal.Title = "Paraphrased version";
                Modal.TextContent = response;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
        }
        catch (RequestTooLongException e)
        {
            Modal.Title = "Try again";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Warning;
            ShowModal = true;
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private const string LocalStorageInputName = "input";
    private const string LocalStorageKeyName = "apikey";

    private async Task SetOpenAiKey(string s)
    {
        await LocalStorage.SetItemAsync(LocalStorageKeyName, s);
        OpenAiKey = s;
    }

    private void OnChangePageNumber(ChangeEventArgs obj)
    {
        if (obj.Value == null)
        {
            return;
        }

        if (Int32.TryParse(obj.Value.ToString(), out int result))
        {
            Page? page = Pages.FirstOrDefault(page => page.PageNumber.Equals(result));
            if (page != null)
            {
                CurrentPage = page;
                ResetScroll();
            }
        }
    }

    private void GoBack()
    {
        CurrentPage = Pages.FirstOrDefault(page => page.PageNumber.Equals(CurrentPage!.PageNumber - 1));
        ResetScroll();
    }

    private void GoNext()
    {
        CurrentPage = Pages.FirstOrDefault(page => page.PageNumber.Equals(CurrentPage!.PageNumber + 1));
        ResetScroll();
    }

    async void ResetScroll()
    {
        await JsRuntime.InvokeVoidAsync("scrollToTopOfElement", "content-container");
    }
}