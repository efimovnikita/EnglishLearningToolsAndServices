@page "/"
@page "/key/{openAiKey}"

@using System.Text.RegularExpressions
@using java.io
@using OpenAI_API
@using OpenAI_API.Chat
@using opennlp.tools.sentdetect
@using opennlp.tools.tokenize
@using Reader.Models
@inject IJSRuntime JsRuntime

<PageTitle>Reader</PageTitle>

@*@if (Sentences.Count > 0)
{
    <main>
        @foreach (Sentence sentence in Sentences)
        {
            if (CurrentMode == Mode.Word)
            {
                <p>
                @foreach (Token token in sentence.Tokens)
                {
                    if (IsWord(token))
                    {
                        string style = "word";
                        if (SelectedWord != null && token.Id.Equals(SelectedWord.Id))
                        {
                            style = "selected-word";
                        }
                        <span class="@style" @onclick="() => AddWord(token)">@token.Text</span>
                    }
                    else
                    {
                        @token.Text
                    }

                    int i = sentence.Tokens.IndexOf(token);
                    if (i + 1 < sentence.Tokens.Count)
                    {
                        if (IsWord(sentence.Tokens[i + 1]))
                        {
                            @(' ')
                        }
                    }
                }
                </p>
            }
            else
            {
                string style = "sentence";
                if (SelectedSentences.FirstOrDefault(s => s.Id.Equals(sentence.Id)) != null)
                {
                    style = "selected-sentence";
                }
                <p class="@style" @onclick="() => AddSentence(sentence)">
                   @foreach (Token token in sentence.Tokens)
                    {
                        <text>@token.Text&nbsp;</text>
                    }
                </p>
            }
        }
    </main>
}

@if (Sentences.Count == 0)
{
    <textarea @bind="RawTextAreaContent" class="form-control" rows="5"></textarea>
    <br />
    <button class="btn btn-primary" @onclick="ProcessText">Import</button>
}

<label>
    <input type="radio" name="mode" value="Word" @onchange="ToggleState" checked="@IsWordMode" />
    Word
</label>
<label>
    <input type="radio" name="mode" value="Sentence" @onchange="ToggleState" checked="@IsSentenceMode" />
    Sentence
</label>

@if (IsKeyDisplays)
{
    <div>
        <label for="openAIKey">OpenAI Key:</label>
        <input id="openAIKey" type="password" class="form-control" @bind="OpenAiKey" />
    </div>
}

<button @onclick="GetDefinitionOrParaphrase" disabled="@IsButtonDisabled" class="btn btn-secondary">
    @if (CurrentMode == Mode.Word)
    {
        <text>Get definition</text>
    }
    else
    {
        <text>Paraphrase</text>
    }
</button>

<p>History</p>
<ul>
    @foreach (Token token in History)
    {
        string style = "";
        if (SelectedWord != null && SelectedWord.Id.Equals(token.Id))
        {
            style = "selected-sentence";
        }
        <li class="@style">@token.Text - @token.Definition</li>
    }
</ul>*@

@{
    string mainStyle = "mx-auto bg-[#F9FAFB] flex flex-col w-full lg:max-w-[900px] p-2.5 rounded-[15px]";
    if (ShowModal)
    {
        mainStyle += " blur";
    }
}
<main class="@mainStyle">
    @if (Sentences.Count == 0)
    {
        <textarea @bind="RawTextAreaContent" class="scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] bg-[#F0F5FF] w-full h-full rounded-[10px] border-dashed border-[1px] border-[#B4C6FC] p-2.5 text-[#374151] text-[16px]"></textarea>
    }
    else
    {
        <div id="content-container" class="scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] flex flex-col gap-[20px] w-full h-full px-2.5 pt-2.5 text-[#374151] text-[18px] leading-6 overflow-auto">
            @foreach (Sentence sentence in Sentences)
            {
                if (CurrentMode == Mode.Word)
                {
                    <p>
                        @foreach (Token token in sentence.Tokens)
                        {
                            if (IsWord(token))
                            {
                                string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                                if (SelectedWord != null && token.Id.Equals(SelectedWord.Id))
                                {
                                    style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                                }
                                <span class="@style" @onclick="() => AddWord(token)">@token.Text</span>
                            }
                            else
                            {
                                @token.Text
                            }

                            int i = sentence.Tokens.IndexOf(token);
                            if (i + 1 < sentence.Tokens.Count)
                            {
                                if (IsWord(sentence.Tokens[i + 1]))
                                {
                                    @(' ')
                                }
                            }
                        }
                    </p>
                }
                else
                {
                    string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                    if (SelectedSentences.FirstOrDefault(s => s.Id.Equals(sentence.Id)) != null)
                    {
                        style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                    }
                    <p class="@style" @onclick="() => AddSentence(sentence)">
                        @foreach (Token token in sentence.Tokens)
                        {
                            <text>@token.Text@(' ')</text>
                        }
                    </p>
                }
            }
        </div>
    }
    <div id="buttons-container" class="flex justify-center items-center mt-2.5 gap-[10px]">
        @if (Sentences.Count == 0)
        {
            <button type="button" @onclick="ProcessText" class="flex w-[50px] h-[50px] bg-[#6875F5] justify-center items-center rounded-full pt-[5px] hover:bg-[#5145CD]">
                <img src="assets/plus.svg" alt="" width="32" height="32"/>
            </button>
        }
        else
        {
            <button type="button" class="flex w-[50px] h-[50px] bg-[#9CA3AF] justify-center items-center rounded-full pt-[5px] cursor-default">
                <img src="assets/history.svg" alt="" width="39" height="35"/>
            </button>
            <button type="button" class="flex w-[50px] h-[50px] bg-[#6875F5] justify-center items-center rounded-full hover:bg-[#5145CD]">
                <img src="assets/settings.svg" alt="" width="41" height="37"/>
            </button>
            <button type="button" @onclick="ToggleState" class="flex p-2.5 gap-[10px]">
                <p class="text-[#5850EC]">W</p>
                @{
                    string style = "flex items-center justify-start w-[50px] h-[26px] bg-[#6875F5] hover:bg-[#5145CD] rounded-full px-[3px]";
                    if (CurrentMode == Mode.Sentence)
                    {
                        style += " justify-end";
                    }
                }
                <div class="@style">
                    <div class="bg-[#E5EDFF] w-[20px] h-[20px] rounded-full drop-shadow-xl"></div>
                </div>
                <p class="text-[#5850EC]">S</p>
            </button>
            string getDefinitionsButtonStyle = "flex w-[50px] h-[50px] justify-center items-center rounded-full pt-[5px]";
            if (IsButtonDisabled)
            {
                getDefinitionsButtonStyle += " cursor-default bg-[#9CA3AF]";
            }
            else
            {
                getDefinitionsButtonStyle += " bg-[#6875F5] hover:bg-[#5145CD]";
            }
            <button type="button" class="@getDefinitionsButtonStyle" @onclick="GetDefinitionOrParaphrase">
                <img src="assets/question.svg" alt="" width="26" height="35"/>
            </button>
        }
    </div>
</main>

@if (ShowModal)
{
    <div id="modal" class="absolute bottom-0 left-0 w-full h-full bg-[#D1D5DB]/50 flex justify-center items-center px-[10px]">
        <div id="modal-window" class="bg-[#F9FAFB] w-full rounded-[15px] lg:max-w-[900px] flex flex-col border-[1px] border-[#CDDBFE]">
            <div id="title" class="flex justify-between p-[5px]">
                <p class="flex flex-1 justify-center items-center uppercase text-[#374151] text-[18px]">Definition</p>
                <button type="button" @onclick="CloseModal" class="flex justify-center items-center w-[30px] h-[30px] bg-[#B4C6FC] hover:bg-[#5145CD] rounded-full">
                    <img src="assets/cross.svg" alt="" width="15" height="15"/>
                </button>
            </div>
            <div id="separator" class="h-[1px] w-full border-t-[1px] border-[#CDDBFE]"></div>
            <div id="nodal-content" class="flex justify-between p-[5px]">
                <p class="flex w-full justify-center items-center text-[#374151] text-[18px]">In this context, 'remained' means that the situation in the mentioned place is still unstable and dangerous, and has not improved or changed much since the warning was issued.</p>
            </div>
        </div>
    </div>
}


@code {
    private string? RawTextAreaContent { get; set; }
    private List<Sentence> Sentences { get; set; } = new();
    private Mode CurrentMode { get; set; } = Mode.Word;
    private bool IsWordMode => CurrentMode == Mode.Word;
    private bool IsSentenceMode => CurrentMode == Mode.Sentence;
    private List<Sentence> SelectedSentences { get; set; } = new();
    private Token? SelectedWord { get; set; }
    [Parameter]
    public string? OpenAiKey { get; set; }
    private bool IsButtonDisabled
    {
        get {
            if (Sentences.Count == 0)
            {
                return true;
            }

            if (String.IsNullOrWhiteSpace(OpenAiKey))
            {
                return true;
            }

            if (SelectedWord == null && SelectedSentences.Count == 0)
            {
                return true;
            }

            return false;
        }
    }

    public bool ShowModal { get; set; } = true;

    private bool IsKeyDisplays => History.Count == 0;

    private List<Token> History
    {
        get
        {
            var result = new List<Token>();
            foreach (Sentence sentence in Sentences)
            {
                result.AddRange(sentence.Tokens.Where(token => !String.IsNullOrWhiteSpace(token.Definition)));
            }

            return result;
        }
    }


/*
    private void ToggleState(ChangeEventArgs e)
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        CurrentMode = (Mode)Enum.Parse(typeof(Mode), e.Value!.ToString()!);
    }
*/

    private void CloseModal() => ShowModal = false;

    private void ToggleState()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        CurrentMode = CurrentMode == Mode.Sentence ? Mode.Word : Mode.Sentence;
    }

    private bool IsWord(Token token)
    {
        return Regex.IsMatch(token.Text, @"^[A-Za-z-'’]+$");
    }

    private void ProcessText()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        Sentences.Clear();
        
        if (String.IsNullOrWhiteSpace(RawTextAreaContent))
        {
            return;
        }

        InputStream sentenceModelIn = new FileInputStream("opennlp-en-ud-ewt-sentence-1.0-1.9.3.bin");
        InputStream tokensModelIn = new FileInputStream("opennlp-en-ud-ewt-tokens-1.0-1.9.3.bin");
        SentenceModel sentenceModel = new(sentenceModelIn);
        TokenizerModel tokenizerModel = new(tokensModelIn);
        SentenceDetectorME sentenceDetector = new(sentenceModel);
        Tokenizer tokenizer = new TokenizerME(tokenizerModel);
        
        string[] sentences = sentenceDetector.sentDetect(RawTextAreaContent);
        foreach (string sentence in sentences)
        {
            string[]? tokens = tokenizer.tokenize(sentence);
            Sentence sentenceObj = new() { Id = Guid.NewGuid(), Tokens = new List<Token>() };
            foreach (string token in tokens)
            {
                sentenceObj.Tokens.Add(new Token { Id = Guid.NewGuid(), SentenceId = sentenceObj.Id, Text = token });
            }
            
            Sentences.Add(sentenceObj);
        }
    }

    private void AddWord(Token token)
    {
        if (SelectedWord != null && SelectedWord.Id.Equals(token.Id))
        {
            SelectedWord = null;
            return;
        }

        SelectedWord = token;
    }
    
    private void AddSentence(Sentence sentence)
    {
        var sentencesWithSameId = SelectedSentences.Where(s => s.Id.Equals(sentence.Id)).ToArray();
        if (sentencesWithSameId.Length != 0)
        {
            foreach (Sentence s in sentencesWithSameId)
            {
                SelectedSentences.Remove(s);
            }
            
            return;
        }
        
        if (SelectedSentences.Count == 5)
        {
            return;
        }
        
        SelectedSentences.Add(sentence);
    }

    private async Task GetDefinitionOrParaphrase()
    {
        try
        {
            OpenAIAPI api = new(OpenAiKey);
            Conversation? chat = api.Chat.CreateConversation();
            if (CurrentMode == Mode.Word && SelectedWord != null)
            {
                if (String.IsNullOrWhiteSpace(SelectedWord.Definition) == false)
                {
                    await JsRuntime.InvokeVoidAsync("alert", $"{SelectedWord.Definition}");
                    return;    
                }
                
                Sentence? sentence = Sentences.FirstOrDefault(s => s.Id.Equals(SelectedWord.SentenceId));
                if (sentence == null)
                {
                    return;
                }
                int i = Sentences.IndexOf(sentence);
                int sentencesCount = Sentences.Count;
                Sentence? prevSentence = null;
                if (i - 1 > 0)
                {
                    prevSentence = Sentences[i - 1];
                }

                Sentence? nextSentence = null;
                if (i + 1 < sentencesCount)
                {
                    nextSentence = Sentences[i + 1];
                }

                string stringRepresentationOfSentence = String.Join(' ', sentence.Tokens.Select(t => t.Text).ToArray());
                string request = $"Give me a simple definition for word \'{SelectedWord.Text}\' in the context of the sentence \'{stringRepresentationOfSentence}\'.";

                if (prevSentence != null)
                {
                    string stringRepresentationOfPrevSentence = String.Join(' ', prevSentence.Tokens.Select(t => t.Text).ToArray());
                    request += $"\nTake into account that previous sentence is \'{stringRepresentationOfPrevSentence}\'.";
                }

                if (nextSentence != null)
                {
                    string stringRepresentationOfNextSentence = String.Join(' ', nextSentence.Tokens.Select(t => t.Text).ToArray());
                    request += $"\nNext sentence is \'{stringRepresentationOfNextSentence}\'.";
                }
                
                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                chat = api.Chat.CreateConversation();
                chat.AppendUserInput($"Give me a list of 3 most appropriate synonyms for word \'{SelectedWord.Text}\' in the context of the sentence \'{stringRepresentationOfSentence}\'. Split synonyms by comma. Follow the pattern: \'Synonyms: list of synonyms.\'");
                string synonymsResponse = await chat.GetResponseFromChatbotAsync();

                SelectedWord.Definition = $"{response}";
                SelectedWord.Definition += $"\n{synonymsResponse}";
            
                await JsRuntime.InvokeVoidAsync("alert", $"{SelectedWord.Definition}");
            }
            else
            {
                var stringRepresentations = new List<string>(SelectedSentences.Count);
                foreach (Sentence sentence in SelectedSentences)
                {
                    string stringRepresentationOfSentence = String.Join(' ', sentence.Tokens.Select(t => t.Text).ToArray());
                    stringRepresentations.Add(stringRepresentationOfSentence);
                }

                string finalJoin = string.Join('\n', stringRepresentations);

                string content = $"Paraphrase this sentences and use really simple English words:\n\n\'{finalJoin}\'";
                
                chat.AppendUserInput(content);
                string response = await chat.GetResponseFromChatbotAsync();
            
                await JsRuntime.InvokeVoidAsync("alert", $"{response}");
            }
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"{e.Message}");
        }
        
    }


}