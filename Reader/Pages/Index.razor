@page "/"
@page "/key/{openAiKey}"
@page "/share"

@inject ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using VersOne.Epub
@using System.Text
@using Fb2.Document
@using Fb2.Document.Models
@using Fb2.Document.Models.Base
@using HtmlAgilityPack
@using iText.Kernel.Pdf
@using iText.Kernel.Pdf.Canvas.Parser
@using iText.Kernel.Pdf.Canvas.Parser.Listener
@inject NavigationManager NavigationManager

<PageTitle>Reader</PageTitle>

@{
    string mainStyle = "mx-auto bg-[#F9FAFB] flex flex-col w-full lg:max-w-[900px] p-2.5 rounded-[15px]";
    if (ShowModal || ShowHistory || ShowSettings)
    {
        mainStyle += " blur";
    }
}
<main class="@mainStyle">
    @if (CurrentPage == null)
    {
        <textarea @bind="RawTextAreaContent" class="resize-none	scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] bg-[#F0F5FF] w-full h-full rounded-[10px] border-dashed border-[1px] border-[#B4C6FC] p-2.5 text-[#374151] text-[16px]"></textarea>
    }
    else
    {
        <div id="content-container" class="scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] flex flex-col gap-[20px] w-full h-full px-2.5 pt-2.5 text-[#374151] text-[18px] leading-6 overflow-auto">
            @foreach (Sentence sentence in CurrentPage.Sentences)
            {
                if (CurrentMode == Mode.Word)
                {
                    <p>
                        @foreach (Token token in sentence.Tokens)
                        {
                            if (IsWord(token))
                            {
                                string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                                if (SelectedWord != null && token.Id.Equals(SelectedWord.Id))
                                {
                                    style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                                }
                                <span class="@($"{style} select-none")" @onclick="() => AddWord(token)">@token.Text</span>
                            }
                            else
                            {
                                @token.Text
                            }

                            @(' ')
                        }
                    </p>
                }
                else
                {
                    string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                    if (SelectedSentences.FirstOrDefault(s => s.Id.Equals(sentence.Id)) != null)
                    {
                        style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                    }
                    <p class="@style" @onclick="() => AddSentence(sentence)">
                        @foreach (Token token in sentence.Tokens)
                        {
                            <text>@token.Text@(' ')</text>
                        }
                    </p>
                }
            }
        </div>
    }
    @if (Pages.Count > 1 && CurrentPage != null)
    {
        <div id="navigation" class="flex justify-center gap-[20px] text-[#374151] text-[18px] pt-1">
            <button
                type="button"
                disabled="@(Pages.FirstOrDefault(page => page.PageNumber == CurrentPage.PageNumber - 1) == null)"
                @onclick="() => CurrentPage = Pages.FirstOrDefault(page => page.PageNumber.Equals(CurrentPage.PageNumber - 1))">
                @("<-")
            </button>
            <div id="pages-counter" class="flex">
                <input class="w-[60px] bg-transparent" type="number" value="@CurrentPage.PageNumber" max="@Pages.Count"
                       @onchange="OnChangePageNumber">
                @("/")
                @Pages.Count
            </div>
            <button
                type="button"
                disabled="@(Pages.FirstOrDefault(page => page.PageNumber == CurrentPage.PageNumber + 1) == null)"
                @onclick="() => CurrentPage = Pages.FirstOrDefault(page => page.PageNumber.Equals(CurrentPage.PageNumber + 1))">
                @("->")
            </button>
        </div>
    }
    <div id="buttons-container" class="flex justify-center items-center mt-2.5 gap-[10px]">
        @if (CurrentPage == null)
        {
            <div class="file-input-zone">
                <InputFile OnChange="HandleFileSelected" accept=".pdf,.epub,.txt,.fb2,application/pdf,application/epub+zip,text/plain" />
            </div>

            <ButtonComponent 
                Action="ProcessText"
                IconName="plus"
                IsDisabled="false"
                IsLoading="@IsLoading"/>
        }
        else
        {
            <ButtonComponent 
                Action="() => ShowHistory = true"
                IconName="history"
                IsDisabled="@(History.Count == 0)"
                IsLoading="false"/>
            
            <ButtonComponent 
                Action="() => ShowSettings = true"
                IconName="settings"
                IsDisabled="false"
                IsLoading="false"/>

            string style = "flex items-center justify-start w-[50px] h-[26px] bg-[#6875F5] hover:bg-[#5145CD] rounded-full px-[3px]";
            if (CurrentMode == Mode.Sentence)
            {
                style += " justify-end";
            }
            <button type="button" @onclick="ToggleState" class="flex p-2.5 gap-[10px]">
                <p class="text-[#5850EC]">W</p>
                <div class="@style">
                    <div class="bg-[#E5EDFF] w-[20px] h-[20px] rounded-full"></div>
                </div>
                <p class="text-[#5850EC]">S</p>
            </button>
            
            <ButtonComponent 
                Action="GetDefinitionOrParaphrase" 
                IconName="question" 
                IsDisabled="IsGetDefinitionButtonDisabled" 
                IsLoading="IsLoading" />
        }
    </div>
</main>

@if (ShowModal)
{
    <ModalWindow Title="@Modal.Title" Content="@Modal.TextContent" ModalType="@Modal.ModalType" CloseModal="() => ShowModal = false" />
}

@if (ShowHistory)
{
    <ModalHistoryWindow Title="History" Content="@History" ModalType="ModalType.Regular" CloseModal="() => ShowHistory = false" />
}

@if (ShowSettings)
{
    <ModalSettingsWindow Title="Settings" OpenAiKeyChanged="SetOpenAiKey" Content="@OpenAiKey" ModalType="ModalType.Regular" CloseModal="() => ShowSettings = false" />
}

@code {
    private string RawTextAreaContent { get; set; } = "";
    // private List<Sentence> Sentences { get; set; } = new();
    private List<Page> Pages { get; set; } = new();
    private Page? CurrentPage { get; set; }
    private Mode CurrentMode { get; set; } = Mode.Word;
    private List<Sentence> SelectedSentences { get; set; } = new();
    private Token? SelectedWord { get; set; }
    private string SharedText { get; set; } = "";
    [Parameter] public string? OpenAiKey { get; set; }
    private bool IsGetDefinitionButtonDisabled
    {
        get {
            if (CurrentPage == null)
            {
                return true;
            }

            if (IsLoading)
            {
                return true;
            }

            if (SelectedWord == null && SelectedSentences.Count == 0)
            {
                return true;
            }

            return false;
        }
    }

    private bool ShowModal { get; set; }
    private bool ShowHistory { get; set; }
    private bool ShowSettings { get; set; }
    private bool IsLoading { get; set; }
    
    private Modal Modal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (OpenAiKey != default)
        {
            await SetOpenAiKey(OpenAiKey);
        }
        
        // Get data from local storage
        string inputData = await LocalStorage.GetItemAsync(LocalStorageInputName);
        string key = await LocalStorage.GetItemAsync(LocalStorageKeyName);
        
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        Dictionary<string, StringValues> query = QueryHelpers.ParseQuery(uri.Query);

        SharedText = query.TryGetValue("text", out StringValues text) ? text : "";
        RawTextAreaContent = string.IsNullOrWhiteSpace(SharedText) == false ? SharedText : inputData;
        OpenAiKey = key;
    }
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        if (Path.GetExtension(file.Name).Contains("epub"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                EpubBook book = await EpubReader.ReadBookAsync(memoryStream);
                RawTextAreaContent = "";
                foreach (EpubTextContentFile textContentFile in book.ReadingOrder)
                {
                    HtmlDocument htmlDocument = new();
                    htmlDocument.LoadHtml(textContentFile.Content);
                    StringBuilder sb = new();
                    foreach (HtmlNode node in htmlDocument.DocumentNode.SelectNodes("//text()"))
                    {
                        sb.AppendLine(node.InnerText.Trim());
                    }
                    string contentText = sb.ToString();
                    RawTextAreaContent += contentText;
                }
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
        
        if (Path.GetExtension(file.Name).Contains("pdf"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                var reader = new PdfReader(memoryStream);
                var pdfDocument = new PdfDocument(reader);
                
                var content = new StringBuilder();
                var strategy = new SimpleTextExtractionStrategy();

                RawTextAreaContent = "";

                for (int i = 1; i <= pdfDocument.GetNumberOfPages(); i++)
                {
                    var page = pdfDocument.GetPage(i);
                    var text = PdfTextExtractor.GetTextFromPage(page, strategy);
                    content.AppendLine(text);
                }

                RawTextAreaContent = content.ToString();
                
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
        
        if (Path.GetExtension(file.Name).Contains("txt"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                RawTextAreaContent = "";
                
                using StreamReader reader = new(memoryStream, Encoding.UTF8);
                string content = await reader.ReadToEndAsync();

                RawTextAreaContent = content;
                
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
        
        if (Path.GetExtension(file.Name).Contains("fb2"))
        {
            try
            {
                IsLoading = true;

                using MemoryStream memoryStream = new();
                await file.OpenReadStream(30000000).CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);

                RawTextAreaContent = "";
                
                Fb2Document fb2Document = new Fb2Document();
                
                fb2Document.Load(memoryStream);

                StringBuilder sb = new StringBuilder();
                foreach (BookBody body in fb2Document.Bodies)
                {
                    foreach (Fb2Node node in body.Content)
                    {
                        string? s = node.ToString();
                        if (String.IsNullOrWhiteSpace(s) == false)
                        {
                            sb.AppendLine(s);
                        }
                    }
                }

                RawTextAreaContent = sb.ToString();

                IsLoading = false;
            }
            catch (Exception ex)
            {
                Modal.Title = "Error";
                Modal.TextContent = ex.Message;
                Modal.ModalType = ModalType.Error;
                ShowModal = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private List<Token> History
    {
        get
        {
            var result = new List<Token>();
            foreach (Page page in Pages)
            {
                foreach (Sentence sentence in page.Sentences)
                {
                    result.AddRange(sentence.Tokens.Where(token => !String.IsNullOrWhiteSpace(token.Definition)));
                }
            }

            return result;
        }
    }
    
    private void ToggleState()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        CurrentMode = CurrentMode == Mode.Sentence ? Mode.Word : Mode.Sentence;
    }

    private static bool IsWord(Token token) => Regex.IsMatch(token.Text, @"^[A-Za-z-'’]+$");

    private async Task ProcessText()
    {
        try
        {
            IsLoading = true;

            SelectedWord = null;
            SelectedSentences.Clear();
            // Sentences.Clear();
            CurrentPage = null;
            Pages.Clear();

            // Add to local storage
            await LocalStorage.SetItemAsync(LocalStorageInputName, RawTextAreaContent);

            if (String.IsNullOrWhiteSpace(RawTextAreaContent))
            {
                return;
            }

            java.io.InputStream sentenceModelIn = new java.io.FileInputStream("opennlp-en-ud-ewt-sentence-1.0-1.9.3.bin");
            java.io.InputStream tokensModelIn = new java.io.FileInputStream("opennlp-en-ud-ewt-tokens-1.0-1.9.3.bin");
            SentenceModel sentenceModel = new(sentenceModelIn);
            TokenizerModel tokenizerModel = new(tokensModelIn);
            SentenceDetectorME sentenceDetector = new(sentenceModel);
            Tokenizer tokenizer = new TokenizerME(tokenizerModel);

            string[] sentences = sentenceDetector.sentDetect(RawTextAreaContent);
            
            List<Sentence> sentencesList = new();
            foreach (string sentence in sentences)
            {
                string[]? tokens = tokenizer.tokenize(sentence);
                Sentence sentenceObj = new() { Id = Guid.NewGuid(), Tokens = new List<Token>() };
                foreach (string token in tokens)
                {
                    sentenceObj.Tokens.Add(new Token { Id = Guid.NewGuid(), SentenceId = sentenceObj.Id, Text = token });
                }

                sentencesList.Add(sentenceObj);
            }
            
            List<List<Sentence>> chunks = SplitIntoChunks(sentencesList, 30);
            for (var i = 0; i < chunks.Count; i++)
            {
                Pages.Add(new Page {Sentences = chunks[i], PageNumber = i + 1});
            }

            CurrentPage = Pages.First();
            
            IsLoading = false;
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private static List<List<T>> SplitIntoChunks<T>(List<T> list, int chunkSize)
    {
        List<List<T>> chunks = new List<List<T>>();
        int count = list.Count;

        for (int i = 0; i < count; i += chunkSize)
        {
            List<T> chunk = list.Skip(i).Take(chunkSize).ToList();
            chunks.Add(chunk);
        }

        return chunks;
    }

    private void AddWord(Token token)
    {
        if (SelectedWord != null && SelectedWord.Id.Equals(token.Id))
        {
            SelectedWord = null;
            return;
        }

        SelectedWord = token;
    }
    
    private void AddSentence(Sentence sentence)
    {
        var sentencesWithSameId = SelectedSentences.Where(s => s.Id.Equals(sentence.Id)).ToArray();
        if (sentencesWithSameId.Length != 0)
        {
            foreach (Sentence s in sentencesWithSameId)
            {
                SelectedSentences.Remove(s);
            }
            
            return;
        }
        
        if (SelectedSentences.Count == 5)
        {
            return;
        }
        
        SelectedSentences.Add(sentence);
    }

    private async Task GetDefinitionOrParaphrase()
    {
        IsLoading = true;
        try
        {
            if (CurrentPage == null)
            {
                return;
            }
            
            if (string.IsNullOrWhiteSpace(OpenAiKey))
            {
                Modal.Title = "Warning";
                Modal.TextContent = "You must provide OpenAI API key (https://platform.openai.com/account/api-keys). Open settings and add the key.";
                Modal.ModalType = ModalType.Warning;
                ShowModal = true;
                
                return;
            }
            OpenAIAPI api = new(OpenAiKey);
            Conversation? chat = api.Chat.CreateConversation();
            if (CurrentMode == Mode.Word && SelectedWord != null)
            {
                if (String.IsNullOrWhiteSpace(SelectedWord.Definition) == false)
                {
                    Modal.Title = "Definition";
                    Modal.TextContent = SelectedWord.Definition;
                    Modal.ModalType = ModalType.Regular;
                    ShowModal = true;
                    return;
                }

                Sentence? sentence = CurrentPage.Sentences.FirstOrDefault(s => s.Id.Equals(SelectedWord.SentenceId));
                if (sentence == null)
                {
                    return;
                }
                int i = CurrentPage.Sentences.IndexOf(sentence);
                int sentencesCount = CurrentPage.Sentences.Count;
                Sentence? prevSentence = null;
                if (i - 1 > 0)
                {
                    prevSentence = CurrentPage.Sentences[i - 1];
                }

                Sentence? nextSentence = null;
                if (i + 1 < sentencesCount)
                {
                    nextSentence = CurrentPage.Sentences[i + 1];
                }

                string stringRepresentationOfSentence = String.Join(' ', sentence.Tokens.Select(t => t.Text).ToArray());
                string request = $"Give me a simple definition for word \'{SelectedWord.Text}\' in the context of the sentence \'{stringRepresentationOfSentence}\'.";

                if (prevSentence != null)
                {
                    string stringRepresentationOfPrevSentence = String.Join(' ', prevSentence.Tokens.Select(t => t.Text).ToArray());
                    request += $"\nTake into account that previous sentence is \'{stringRepresentationOfPrevSentence}\'.";
                }

                if (nextSentence != null)
                {
                    string stringRepresentationOfNextSentence = String.Join(' ', nextSentence.Tokens.Select(t => t.Text).ToArray());
                    request += $"\nNext sentence is \'{stringRepresentationOfNextSentence}\'.";
                }

                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                chat = api.Chat.CreateConversation();
                chat.AppendUserInput($"Give me a list of 3 most appropriate synonyms for word \'{SelectedWord.Text}\' in the context of the sentence \'{stringRepresentationOfSentence}\'. Split synonyms by comma. Follow the pattern: \'Synonyms: list of synonyms.\'");
                string synonymsResponse = await chat.GetResponseFromChatbotAsync();

                SelectedWord.Definition = $"{response}";
                SelectedWord.Definition += $"\n{synonymsResponse}";

                Modal.Title = "Definition";
                Modal.TextContent = SelectedWord.Definition;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
            else
            {
                var stringRepresentations = new List<string>(SelectedSentences.Count);
                foreach (Sentence sentence in SelectedSentences)
                {
                    string stringRepresentationOfSentence = String.Join(' ', sentence.Tokens.Select(t => t.Text).ToArray());
                    stringRepresentations.Add(stringRepresentationOfSentence);
                }

                string finalJoin = string.Join('\n', stringRepresentations);

                string content = $"Paraphrase this sentences and use really simple English words:\n\n\'{finalJoin}\'";

                chat.AppendUserInput(content);
                string response = await chat.GetResponseFromChatbotAsync();

                Modal.Title = "Paraphrased version";
                Modal.TextContent = response;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private const string LocalStorageInputName = "input";
    private const string LocalStorageKeyName = "apikey";

    private async Task SetOpenAiKey(string s)
    {
        await LocalStorage.SetItemAsync(LocalStorageKeyName, s);
        OpenAiKey = s;
    }

    private void OnChangePageNumber(ChangeEventArgs obj)
    {
        if (obj.Value == null)
        {
            return;
        }

        if (Int32.TryParse(obj.Value.ToString(), out int result))
        {
            Page? page = Pages.FirstOrDefault(page => page.PageNumber.Equals(result));
            if (page != null)
            {
                CurrentPage = page;
            }
        }
    }

}