@page "/"
@page "/key/{openAiKey}"
@page "/share"
@page "/db/{textId}"

@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using VersOne.Epub
@using System.Text
@using Fb2.Document
@using Fb2.Document.Models
@using Fb2.Document.Models.Base
@using HtmlAgilityPack
@using iText.Kernel.Pdf
@using iText.Kernel.Pdf.Canvas.Parser
@using iText.Kernel.Pdf.Canvas.Parser.Listener
@using System.Reflection
@using System.Text.Json
@using Reader.Tools
@using TiktokenSharp
@using System.Net.Http.Headers
@using LiteDB
@using Microsoft.Extensions.Options
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject NavigationManager NavigationManager
@inject IOptions<TextToSpeechApiSettings> TextToSpeechApiSettings

<PageTitle>Reader</PageTitle>

@{
    string mainStyle = "mx-auto bg-[#F9FAFB] flex flex-col w-full lg:max-w-[900px] p-2.5 rounded-[15px]";
    if (ShowModal || ShowHistory || ShowSettings)
    {
        mainStyle += " blur";
    }
}
<main class="@mainStyle">
    @if (CurrentPage == null)
    {
        <textarea 
            @bind="RawTextAreaContent" 
            placeholder="Paste text, website link, youtube link ..."   
            class="resize-none scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] bg-[#F0F5FF] w-full h-full rounded-[10px] border-dashed border-[1px] border-[#B4C6FC] p-2.5 text-[#374151] text-[16px]"></textarea>
    }
    else
    {
        <div id="content-container" class="scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] flex flex-col gap-[20px] w-full h-full px-2.5 pt-2.5 text-[#374151] text-[18px] leading-6 overflow-auto">
            @foreach (Sentence sentence in CurrentPage.Sentences)
            {
                if (CurrentMode == Mode.Word)
                {
                    List<Token> tokensWithSpaces = sentence.GetTokensWithSpaces();
                    <p>
                        @foreach (Token token in tokensWithSpaces)
                        {
                            if (IsWord(token))
                            {
                                string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                                if (SelectedWord != null && token.Id.Equals(SelectedWord.Id))
                                {
                                    style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                                }
                                <span class="@($"{style} select-none")" @onclick="() => AddWord(token)">@token.Text</span>
                            }
                            else
                            {
                                @token.Text
                            }
                        }
                    </p>
                }
                else
                {
                    string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                    if (SelectedSentences.FirstOrDefault(s => s.Id.Equals(sentence.Id)) != null)
                    {
                        style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                    }

                    <p class="@style" @onclick="() => AddSentence(sentence)">
                        @sentence.ToString()
                    </p>
                }
            }
        </div>
    }
    @if (Pages.Count > 1 && CurrentPage != null)
    {
        <div id="navigation" class="flex justify-center gap-[20px] text-[#374151] text-[18px] pt-1">
            <button
                type="button"
                disabled="@(Pages.FirstOrDefault(page => page.PageNumber == CurrentPage.PageNumber - 1) == null)"
                @onclick="GoBack">
                @("<-")
            </button>
            <div id="pages-counter" class="flex">
                <input class="w-[60px] bg-transparent" type="number" value="@CurrentPage.PageNumber" max="@Pages.Count"
                       @onchange="OnChangePageNumber">
                @("/")
                @Pages.Count
            </div>
            <button
                type="button"
                disabled="@(Pages.FirstOrDefault(page => page.PageNumber == CurrentPage.PageNumber + 1) == null)"
                @onclick="GoNext">
                @("->")
            </button>
        </div>
    }
    <div id="buttons-container" class="flex justify-center items-center mt-2.5 gap-[8px]">
        <ButtonComponent 
            Action="() => ShowSettings = true"
            IconName="settings"
            IsDisabled="false"
            IsLoading="false"/>
        
        @if (CurrentPage == null)
        {
            <div class="file-input-zone">
                <InputFile OnChange="HandleFileSelected" accept=".pdf,.epub,.txt,.fb2,application/pdf,application/epub+zip,text/plain,audio/mpeg,audio/wav" />
            </div>

            <ButtonComponent 
                Action="ProcessText"
                IconName="plus"
                IsDisabled="false"
                IsLoading="@IsLoading"/>
        }
        else
        {
            <ButtonComponent 
                Action="SaveAndShareLink"
                IconName="share"
                IsDisabled="false"
                IsLoading="false"/>

            string style = "flex items-center justify-start w-[50px] h-[26px] bg-[#6875F5] hover:bg-[#5145CD] rounded-full px-[3px]";
            if (CurrentMode == Mode.Sentence)
            {
                style += " justify-end";
            }
            <button type="button" @onclick="ToggleState" class="flex p-2.5 gap-[10px]">
                <p class="text-[#5850EC]">W</p>
                <div class="@style">
                    <div class="bg-[#E5EDFF] w-[20px] h-[20px] rounded-full"></div>
                </div>
                <p class="text-[#5850EC]">S</p>
            </button>
            
            <ButtonComponent 
                Action="PlayAudio" 
                IconName="waves" 
                IsDisabled="false" 
                IsLoading="IsPlayAudioLoading" />
            
            <ButtonComponent 
                Action="GetDefinitionOrParaphrase" 
                IconName="question" 
                IsDisabled="IsGetDefinitionButtonDisabled" 
                IsLoading="IsLoading" />
        }
    </div>
</main>

@if (ShowModal)
{
    <ModalWindow Title="@Modal.Title" Content="@Modal.TextContent" ModalType="@Modal.ModalType" CloseModal="() => ShowModal = false" Token="SelectedWord" />
}

@if (ShowHistory)
{
    <ModalHistoryWindow Title="History" Content="@History" ModalType="ModalType.Regular" CloseModal="() => ShowHistory = false" />
}

@if (ShowSettings)
{
    <ModalSettingsWindow 
        Title="Settings" 
        OpenAiKeyChanged="SetOpenAiKey" 
        OpenAiapiKey="@OpenAiKey" 
        ModalType="ModalType.Regular" 
        CloseModal="() => ShowSettings = false" />
}

@code {
    private string RawTextAreaContent { get; set; } = "";
    private List<Page> Pages { get; set; } = new();
    private Page? CurrentPage { get; set; }
    private Mode CurrentMode { get; set; } = Mode.Word;
    private List<Sentence> SelectedSentences { get; set; } = new();
    private Token? SelectedWord { get; set; }
    private string SharedText { get; set; } = "";
    [Parameter] public string? OpenAiKey { get; set; }
    [Parameter] public string? TextId { get; set; }
    private bool IsGetDefinitionButtonDisabled
    {
        get {
            if (CurrentPage == null)
            {
                return true;
            }

            if (IsLoading)
            {
                return true;
            }

            if (SelectedWord == null && SelectedSentences.Count == 0)
            {
                return true;
            }

            return false;
        }
    }

    private bool ShowModal { get; set; }
    private bool ShowHistory { get; set; }
    private bool ShowSettings { get; set; }
    private bool IsLoading { get; set; }
    private bool IsPlayAudioLoading { get; set; }

    private Modal Modal { get; set; } = new();
    
    private async Task PlayAudio()
    {
        try
        {
            string? url = TextToSpeechApiSettings.Value.Url;
            if (url == null)
            {
                return;
            }

            if (CurrentPage == null)
            {
                return;
            }
            
            StringBuilder builder = new();
            PrepareRequestTextContext(builder);

            var requestData = new { Text = builder.ToString() };

            JsonSerializerOptions jsonOptions = new()
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };
            string jsonData = JsonSerializer.Serialize(requestData, jsonOptions);
            
            HttpClientHandler httpClientHandler = new()
            {
                ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
            };

            using HttpClient client = new(httpClientHandler);

            client.Timeout = TimeSpan.FromMinutes(4);

            HttpContent content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            IsPlayAudioLoading = true;
            HttpResponseMessage response = await client.PostAsync(url, content);
            IsPlayAudioLoading = false;

            response.EnsureSuccessStatusCode();

            if (response.IsSuccessStatusCode)
            {
                // Read the audio content from the response stream
                byte[] audioData = await response.Content.ReadAsByteArrayAsync();

                // Convert the audio data to a base64-encoded string
                string base64Audio = Convert.ToBase64String(audioData);

                // Invoke JavaScript function to play the audio
                await JsRuntime.InvokeVoidAsync("playAudio", base64Audio);
            }
        }
        catch(Exception ex)
        {
            Modal.Title = "Error";
            Modal.TextContent = ex.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsPlayAudioLoading = false;
        }
    }

    private void PrepareRequestTextContext(StringBuilder builder)
    {
        switch (SelectedSentences.Count)
        {
            case 0 when SelectedWord == null:
            {
                if (CurrentPage != null)
                {
                    builder.AppendJoin(' ', CurrentPage.Sentences.Select(sentence => ReplaceApostrophe(sentence.ToString())));
                }
                break;
            }
            case > 0:
                builder.AppendJoin(' ', SelectedSentences.Select(sentence => ReplaceApostrophe(sentence.ToString())));
                break;
        }

        if (SelectedWord != null)
        {
            builder.Append(SelectedWord.Text);
        }
    }

    public static string ReplaceApostrophe(string input) => input.Replace("'", "’");

    protected override async Task OnInitializedAsync()
    {
        if (OpenAiKey != default)
        {
            await SetOpenAiKey(OpenAiKey);
        }

        string textFromStorage = GetTextFromDbByGuid(TextId);
        string inputData;
        if (String.IsNullOrEmpty(TextId) == false && String.IsNullOrEmpty(textFromStorage) == false)
        {
            inputData = textFromStorage;
        }
        else
        {
            inputData = await LocalStorage.GetItemAsync(LocalStorageInputName);
        }
        
        string openAiKey = await LocalStorage.GetItemAsync(LocalStorageKeyName);

        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        Dictionary<string, StringValues> query = QueryHelpers.ParseQuery(uri.Query);

        SharedText = query.TryGetValue("text", out StringValues text) ? text : "";
        RawTextAreaContent = String.IsNullOrWhiteSpace(SharedText) == false ? SharedText : inputData;
        OpenAiKey = openAiKey;
    }
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        string extension = Path.GetExtension(file.Name);
        
        try
        {
            IsLoading = true;
    
            using MemoryStream memoryStream = new();
            
            const long maxFileSizeInBytes = 100 * 1024 * 1024;
            await file.OpenReadStream(maxFileSizeInBytes).CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);

            await (extension switch
            {
                _ when extension.Contains("epub") => HandleEpubFileAsync(memoryStream),
                _ when extension.Contains("pdf") => HandlePdfFileAsync(memoryStream),
                _ when extension.Contains("txt") => HandleTxtFileAsync(memoryStream),
                _ when extension.Contains("fb2") => HandleFb2FileAsync(memoryStream),
                _ when extension.Contains("mp3") || extension.Contains("wav") => HandleAudioFileAsync(file, extension),
                _ => throw new Exception("Unsupported file type.")
                });
        }
        catch (Exception ex)
        {
            Modal.Title = "Error";
            Modal.TextContent = ex.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private async Task HandleEpubFileAsync(MemoryStream memoryStream)
    {
        EpubBook book = await EpubReader.ReadBookAsync(memoryStream);
        RawTextAreaContent = "";
        foreach (EpubTextContentFile textContentFile in book.ReadingOrder)
        {
            HtmlDocument htmlDocument = new();
            htmlDocument.LoadHtml(textContentFile.Content);
            StringBuilder sb = new();
            foreach (HtmlNode node in htmlDocument.DocumentNode.SelectNodes("//text()"))
            {
                sb.AppendLine(node.InnerText.Trim());
            }
            string contentText = sb.ToString();
            RawTextAreaContent += contentText;
        }  
    }
    
    private Task HandlePdfFileAsync(MemoryStream memoryStream)
    {
        PdfReader reader = new(memoryStream);
        PdfDocument pdfDocument = new(reader);
                
        StringBuilder content = new();

        RawTextAreaContent = "";

        int pages = pdfDocument.GetNumberOfPages();
        for (int i = 1; i <= pages; i++)
        {
            PdfPage? page = pdfDocument.GetPage(i);
            string? text = PdfTextExtractor.GetTextFromPage(page, new SimpleTextExtractionStrategy());
            content.AppendLine(text);
        }

        RawTextAreaContent = content.ToString();
        return Task.CompletedTask;
    }
    
    private async Task HandleTxtFileAsync(MemoryStream memoryStream)
    {
        RawTextAreaContent = "";
                
        using StreamReader reader = new(memoryStream, Encoding.UTF8);
        string content = await reader.ReadToEndAsync();

        RawTextAreaContent = content;
    }
    
    private Task HandleFb2FileAsync(MemoryStream memoryStream)
    {
        RawTextAreaContent = "";
                
        Fb2Document fb2Document = new();
                
        fb2Document.Load(memoryStream);

        StringBuilder sb = new();
        foreach (BookBody body in fb2Document.Bodies)
        {
            foreach (Fb2Node node in body.Content)
            {
                string? s = node.ToString();
                if (String.IsNullOrWhiteSpace(s) == false)
                {
                    sb.AppendLine(s);
                }
            }
        }

        RawTextAreaContent = sb.ToString();
        return Task.CompletedTask;
    }
    
    private async Task HandleAudioFileAsync(IBrowserFile file, string extension)
    {
        Assembly currentAssembly = Assembly.GetExecutingAssembly();
        string audioFilePath = $"{new FileInfo(currentAssembly.Location).Directory!.FullName}/{Guid.NewGuid()}{extension}";
        
        try
        {
            if (String.IsNullOrWhiteSpace(OpenAiKey))
            {
                throw new Exception("You must provide OpenAI API key (https://platform.openai.com/account/api-keys). Open settings and add the key.");
            }

            // Save the file to the temporary location
            await using FileStream fileStream = new(audioFilePath, FileMode.Create);
            
            // set maximum allowed file size to 100MB
            const long maxFileSizeInBytes = 100 * 1024 * 1024;
            await file.OpenReadStream(maxFileSizeInBytes).CopyToAsync(fileStream);
            
            AudioTranscriberAndTranslator transcriberAndTranslator = new(OpenAiKey);
            RawTextAreaContent = await transcriberAndTranslator.TranscribeAudio(audioFilePath);
        }
        catch (Exception ex)
        {
            Modal.Title = "Error";
            Modal.TextContent = ex.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            DeleteTempFile(audioFilePath);
        }
            
        DeleteTempFile(audioFilePath);
        return;

        void DeleteTempFile(string path)
        {
            // Delete the temporary file
            File.Delete(path);

            IsLoading = false;
        }    
    }

    private List<Token> History
    {
        get
        {
            var result = new List<Token>();
            foreach (Page page in Pages)
            {
                foreach (Sentence sentence in page.Sentences)
                {
                    result.AddRange(sentence.Tokens.Where(token => !String.IsNullOrWhiteSpace(token.Definition)));
                }
            }

            return result;
        }
    }
    
    private void ToggleState()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        CurrentMode = CurrentMode == Mode.Sentence ? Mode.Word : Mode.Sentence;
    }

    private static bool IsWord(Token token) => Regex.IsMatch(token.Text, @"^[A-Za-z-'’]+$");

    private async Task ProcessText()
    {
        try
        {
            IsLoading = true;

            SelectedWord = null;
            SelectedSentences.Clear();
            CurrentPage = null;
            Pages.Clear();
            
            // process URL's
            UrlExtractor urlExtractor = new();
            string? url = urlExtractor.ExtractUrl(RawTextAreaContent);
            if (String.IsNullOrEmpty(url) == false)
            {
                TextContentExtractor textContentExtractor = new(OpenAiKey!);
                string textContentFromUrlAsync = await textContentExtractor.ExtractTextContentFromUrlAsync(url);
                if (String.IsNullOrEmpty(textContentFromUrlAsync) == false)
                {
                    RawTextAreaContent = textContentFromUrlAsync;
                }
            }
            
            // Add to local storage
            await LocalStorage.SetItemAsync(LocalStorageInputName, RawTextAreaContent);

            if (String.IsNullOrWhiteSpace(RawTextAreaContent))
            {
                return;
            }

            List<Sentence> sentencesList = TokenizerAndSentenceExtractor.GetSentencesList(RawTextAreaContent);

            List<List<Sentence>> chunks = SplitIntoChunks(sentencesList, 30);
            for (int i = 0; i < chunks.Count; i++)
            {
                Pages.Add(new Page {Sentences = chunks[i], PageNumber = i + 1});
            }

            CurrentPage = Pages.First();
            
            IsLoading = false;
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private static List<List<T>> SplitIntoChunks<T>(List<T> list, int chunkSize)
    {
        List<List<T>> chunks = new List<List<T>>();
        int count = list.Count;

        for (int i = 0; i < count; i += chunkSize)
        {
            List<T> chunk = list.Skip(i).Take(chunkSize).ToList();
            chunks.Add(chunk);
        }

        return chunks;
    }

    private void AddWord(Token token)
    {
        if (SelectedWord != null && SelectedWord.Id.Equals(token.Id))
        {
            SelectedWord = null;
            return;
        }

        SelectedWord = token;
    }
    
    private void AddSentence(Sentence sentence)
    {
        Sentence[] sentencesWithSameId = SelectedSentences.Where(s => s.Id.Equals(sentence.Id)).ToArray();
        if (sentencesWithSameId.Length != 0)
        {
            foreach (Sentence s in sentencesWithSameId)
            {
                SelectedSentences.Remove(s);
            }
            
            return;
        }

        SelectedSentences.Add(sentence);
    }

    private async Task GetDefinitionOrParaphrase()
    {
        IsLoading = true;

        try
        {
            if (CurrentPage == null)
            {
                return;
            }

            if (String.IsNullOrWhiteSpace(OpenAiKey))
            {
                Modal.Title = "Warning";
                Modal.TextContent = "You must provide OpenAI API key (https://platform.openai.com/account/api-keys). Open settings and add the key.";
                Modal.ModalType = ModalType.Warning;
                ShowModal = true;

                return;
            }
            
            OpenAIAPI api = new(OpenAiKey);
            Conversation? chat = api.Chat.CreateConversation();
            
            if (CurrentMode == Mode.Word && SelectedWord != null)
            {
                if (String.IsNullOrWhiteSpace(SelectedWord.Definition) == false)
                {
                    Modal.Title = "Definition";
                    Modal.TextContent = SelectedWord.Definition;
                    Modal.ModalType = ModalType.Regular;
                    ShowModal = true;
                    return;
                }

                RequestManager requestManager = new(Pages, SelectedWord);

                string request = requestManager.GetBaseRequestForWord();
                string synonymsRequest = requestManager.GetSynonymsRequestForWord();

                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                chat = api.Chat.CreateConversation();
                chat.AppendUserInput(synonymsRequest);
                string synonymsResponse = await chat.GetResponseFromChatbotAsync();

                SelectedWord.Definition = $"{response}";
                SelectedWord.Definition += $"<br/>{synonymsResponse}";

                Modal.Title = "Definition";
                Modal.TextContent = SelectedWord.Definition;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
            else
            {
                TikToken tikToken = TikToken.EncodingForModel("gpt-3.5-turbo");
                string request = RequestManager.GetRequestForSentences(tikToken, SelectedSentences);

                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                Modal.Title = "Paraphrased version";
                Modal.TextContent = response;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
        }
        catch (RequestTooLongException e)
        {
            Modal.Title = "Try again";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Warning;
            ShowModal = true;
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private const string LocalStorageInputName = "input";
    private const string LocalStorageKeyName = "apikey";
    private async Task SetOpenAiKey(string s)
    {
        await LocalStorage.SetItemAsync(LocalStorageKeyName, s);
        OpenAiKey = s;
    }
    private void OnChangePageNumber(ChangeEventArgs obj)
    {
        if (obj.Value == null)
        {
            return;
        }

        if (Int32.TryParse(obj.Value.ToString(), out int result))
        {
            Page? page = Pages.FirstOrDefault(page => page.PageNumber.Equals(result));
            if (page != null)
            {
                CurrentPage = page;
                ResetScroll();
            }
        }
    }

    private void GoBack()
    {
        CurrentPage = Pages.FirstOrDefault(page => page.PageNumber.Equals(CurrentPage!.PageNumber - 1));
        ResetScroll();
    }

    private void GoNext()
    {
        CurrentPage = Pages.FirstOrDefault(page => page.PageNumber.Equals(CurrentPage!.PageNumber + 1));
        ResetScroll();
    }

    async void ResetScroll()
    {
        await JsRuntime.InvokeVoidAsync("scrollToTopOfElement", "content-container");
    }

    private async Task SaveAndShareLink()
    {
        Guid guid = Guid.NewGuid();
        StringBuilder stringBuilder = new();
        Pages.SelectMany(page => page.Sentences).Aggregate(stringBuilder, (builder, sentence) => builder.AppendLine(sentence.ToString()));

        using (LiteDatabase store = new($"Filename={GetDbFilePath()};Connection=Shared;"))
        {
            ILiteCollection<StoreTextRecord> collection = store.GetCollection<StoreTextRecord>("Texts");
            string text = stringBuilder.ToString();
            collection.Insert(new StoreTextRecord {Id = guid, Text = text});
        }

        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        string baseUri = $"{uri.Scheme}://{uri.Authority}/";
        string urlPath = $"{baseUri}db/{guid}";
        await JsRuntime.InvokeVoidAsync("copyToClipboard", urlPath);
        
        Modal.Title = "Link copied";
        Modal.TextContent = "Link was copied to your clipboard.<br/>You can send it to anyone...";
        Modal.ModalType = ModalType.Regular;
        ShowModal = true;
    }

    private static string GetDbFilePath()
    {
        string? assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        string dbFolderPath = Path.Combine(assemblyFolder!, "db");
        string dbFilePath = Path.Combine(dbFolderPath, "Store.db");
        return dbFilePath;
    }

    public string GetTextFromDbByGuid(string? guidString)
    {
        using LiteDatabase store = new($"Filename={GetDbFilePath()};Connection=Shared;");
        ILiteCollection<StoreTextRecord> collection = store.GetCollection<StoreTextRecord>("Texts");
        
        if (guidString == null) return "";
        
        Guid guid = new(guidString);
        StoreTextRecord record = collection.FindById(guid);
        return record != null ? record.Text : "";
    }
    
}