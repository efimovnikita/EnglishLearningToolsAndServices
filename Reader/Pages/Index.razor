@page "/"
@page "/key/{openAiKey}"

<PageTitle>Reader</PageTitle>

@{
    string mainStyle = "mx-auto bg-[#F9FAFB] flex flex-col w-full lg:max-w-[900px] p-2.5 rounded-[15px]";
    if (ShowModal || ShowHistory || ShowSettings)
    {
        mainStyle += " blur";
    }
}
<main class="@mainStyle">
    @if (Sentences.Count == 0)
    {
        <textarea @bind="RawTextAreaContent" class="resize-none	scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] bg-[#F0F5FF] w-full h-full rounded-[10px] border-dashed border-[1px] border-[#B4C6FC] p-2.5 text-[#374151] text-[16px]"></textarea>
    }
    else
    {
        <div id="content-container" class="scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] flex flex-col gap-[20px] w-full h-full px-2.5 pt-2.5 text-[#374151] text-[18px] leading-6 overflow-auto">
            @foreach (Sentence sentence in Sentences)
            {
                if (CurrentMode == Mode.Word)
                {
                    <p>
                        @foreach (Token token in sentence.Tokens)
                        {
                            if (IsWord(token))
                            {
                                string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                                if (SelectedWord != null && token.Id.Equals(SelectedWord.Id))
                                {
                                    style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                                }
                                <span class="@style" @onclick="() => AddWord(token)">@token.Text</span>
                            }
                            else
                            {
                                @token.Text
                            }

                            @(' ')
                        }
                    </p>
                }
                else
                {
                    string style = "bg-transparent rounded-[5px] hover:bg-[#FCE96A] cursor-pointer";
                    if (SelectedSentences.FirstOrDefault(s => s.Id.Equals(sentence.Id)) != null)
                    {
                        style = "rounded-[5px] bg-[#FCE96A] cursor-pointer";
                    }
                    <p class="@style" @onclick="() => AddSentence(sentence)">
                        @foreach (Token token in sentence.Tokens)
                        {
                            <text>@token.Text@(' ')</text>
                        }
                    </p>
                }
            }
        </div>
    }
    <div id="buttons-container" class="flex justify-center items-center mt-2.5 gap-[10px]">
        @if (Sentences.Count == 0)
        {
            <button type="button" @onclick="ProcessText" class="flex w-[50px] h-[50px] bg-[#6875F5] justify-center items-center rounded-full hover:bg-[#5145CD]">
                <img src="assets/plus.svg" alt="" width="40" height="40"/>
            </button>
        }
        else
        {
            string getDefinitionsButtonStyle = "flex w-[50px] h-[50px] justify-center items-center rounded-full";
            string historyButtonStyle = getDefinitionsButtonStyle;
            if (IsButtonDisabled || IsLoading)
            {
                getDefinitionsButtonStyle += " cursor-default bg-[#9CA3AF]";
            }
            else
            {
                getDefinitionsButtonStyle += " bg-[#6875F5] hover:bg-[#5145CD]";
            }

            if (History.Count > 0)
            {
                historyButtonStyle += " bg-[#6875F5] hover:bg-[#5145CD]";

            }
            else
            {
                historyButtonStyle += " cursor-default bg-[#9CA3AF]";
            }
            
            <button type="button" class="@historyButtonStyle" @onclick="() => ShowHistory = true">
                <img src="assets/history.svg" alt="" width="40" height="40"/>
            </button>
            <button type="button" @onclick="() => ShowSettings = true" class="flex w-[50px] h-[50px] bg-[#6875F5] justify-center items-center rounded-full hover:bg-[#5145CD]">
                <img src="assets/settings.svg" alt="" width="40" height="40"/>
            </button>
            
            string style = "flex items-center justify-start w-[50px] h-[26px] bg-[#6875F5] hover:bg-[#5145CD] rounded-full px-[3px]";
            if (CurrentMode == Mode.Sentence)
            {
                style += " justify-end";
            }
            <button type="button" @onclick="ToggleState" class="flex p-2.5 gap-[10px]">
                <p class="text-[#5850EC]">W</p>
                <div class="@style">
                    <div class="bg-[#E5EDFF] w-[20px] h-[20px] rounded-full"></div>
                </div>
                <p class="text-[#5850EC]">S</p>
            </button>
            
            <button type="button" class="@getDefinitionsButtonStyle" @onclick="GetDefinitionOrParaphrase">
                @if (IsLoading == false)
                {
                    <img src="assets/question.svg" alt="" width="40" height="40"/>
                }
                else
                {
                    <img src="assets/spinner.svg" class="animate-spin" alt="" width="40" height="40"/>
                }
            </button>
        }
    </div>
</main>

@if (ShowModal)
{
    <ModalWindow Title="@Modal.Title" Content="@Modal.TextContent" ModalType="@Modal.ModalType" CloseModal="CloseModal" />
}

@if (ShowHistory)
{
    <ModalHistoryWindow Title="History" Content="@History" ModalType="ModalType.Regular" CloseModal="() => ShowHistory = false" />
}

@if (ShowSettings)
{
    <ModalSettingsWindow Title="Settings" OpenAiKeyChanged="s => OpenAiKey = s" Content="@OpenAiKey" ModalType="ModalType.Regular" CloseModal="() => ShowSettings = false" />
}

@code {
    private string? RawTextAreaContent { get; set; }
    private List<Sentence> Sentences { get; set; } = new();
    private Mode CurrentMode { get; set; } = Mode.Word;
    private List<Sentence> SelectedSentences { get; set; } = new();
    private Token? SelectedWord { get; set; }
    [Parameter]
    public string? OpenAiKey { get; set; }
    private bool IsButtonDisabled
    {
        get {
            if (Sentences.Count == 0)
            {
                return true;
            }

            if (String.IsNullOrWhiteSpace(OpenAiKey))
            {
                return true;
            }

            if (SelectedWord == null && SelectedSentences.Count == 0)
            {
                return true;
            }

            return false;
        }
    }

    private bool ShowModal { get; set; }

    private Modal Modal { get; set; } = new();

    private List<Token> History
    {
        get
        {
            var result = new List<Token>();
            foreach (Sentence sentence in Sentences)
            {
                result.AddRange(sentence.Tokens.Where(token => !String.IsNullOrWhiteSpace(token.Definition)));
            }

            return result;
        }
    }

    private void CloseModal() => ShowModal = false;

    private void ToggleState()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        CurrentMode = CurrentMode == Mode.Sentence ? Mode.Word : Mode.Sentence;
    }

    private bool IsWord(Token token)
    {
        return Regex.IsMatch(token.Text, @"^[A-Za-z-'’]+$");
    }

    private void ProcessText()
    {
        SelectedWord = null;
        SelectedSentences.Clear();
        Sentences.Clear();
        
        if (String.IsNullOrWhiteSpace(RawTextAreaContent))
        {
            return;
        }

        java.io.InputStream sentenceModelIn = new java.io.FileInputStream("opennlp-en-ud-ewt-sentence-1.0-1.9.3.bin");
        java.io.InputStream tokensModelIn = new java.io.FileInputStream("opennlp-en-ud-ewt-tokens-1.0-1.9.3.bin");
        SentenceModel sentenceModel = new(sentenceModelIn);
        TokenizerModel tokenizerModel = new(tokensModelIn);
        SentenceDetectorME sentenceDetector = new(sentenceModel);
        Tokenizer tokenizer = new TokenizerME(tokenizerModel);
        
        string[] sentences = sentenceDetector.sentDetect(RawTextAreaContent);
        foreach (string sentence in sentences)
        {
            string[]? tokens = tokenizer.tokenize(sentence);
            Sentence sentenceObj = new() { Id = Guid.NewGuid(), Tokens = new List<Token>() };
            foreach (string token in tokens)
            {
                sentenceObj.Tokens.Add(new Token { Id = Guid.NewGuid(), SentenceId = sentenceObj.Id, Text = token });
            }
            
            Sentences.Add(sentenceObj);
        }
    }

    private void AddWord(Token token)
    {
        if (SelectedWord != null && SelectedWord.Id.Equals(token.Id))
        {
            SelectedWord = null;
            return;
        }

        SelectedWord = token;
    }
    
    private void AddSentence(Sentence sentence)
    {
        var sentencesWithSameId = SelectedSentences.Where(s => s.Id.Equals(sentence.Id)).ToArray();
        if (sentencesWithSameId.Length != 0)
        {
            foreach (Sentence s in sentencesWithSameId)
            {
                SelectedSentences.Remove(s);
            }
            
            return;
        }
        
        if (SelectedSentences.Count == 5)
        {
            return;
        }
        
        SelectedSentences.Add(sentence);
    }

    private async Task GetDefinitionOrParaphrase()
    {
        IsLoading = true;
        try
        {
            OpenAIAPI api = new(OpenAiKey);
            Conversation? chat = api.Chat.CreateConversation();
            if (CurrentMode == Mode.Word && SelectedWord != null)
            {
                if (String.IsNullOrWhiteSpace(SelectedWord.Definition) == false)
                {
                    Modal.Title = "Definition";
                    Modal.TextContent = SelectedWord.Definition;
                    Modal.ModalType = ModalType.Regular;
                    ShowModal = true;
                    return;
                }

                Sentence? sentence = Sentences.FirstOrDefault(s => s.Id.Equals(SelectedWord.SentenceId));
                if (sentence == null)
                {
                    return;
                }
                int i = Sentences.IndexOf(sentence);
                int sentencesCount = Sentences.Count;
                Sentence? prevSentence = null;
                if (i - 1 > 0)
                {
                    prevSentence = Sentences[i - 1];
                }

                Sentence? nextSentence = null;
                if (i + 1 < sentencesCount)
                {
                    nextSentence = Sentences[i + 1];
                }

                string stringRepresentationOfSentence = String.Join(' ', sentence.Tokens.Select(t => t.Text).ToArray());
                string request = $"Give me a simple definition for word \'{SelectedWord.Text}\' in the context of the sentence \'{stringRepresentationOfSentence}\'.";

                if (prevSentence != null)
                {
                    string stringRepresentationOfPrevSentence = String.Join(' ', prevSentence.Tokens.Select(t => t.Text).ToArray());
                    request += $"\nTake into account that previous sentence is \'{stringRepresentationOfPrevSentence}\'.";
                }

                if (nextSentence != null)
                {
                    string stringRepresentationOfNextSentence = String.Join(' ', nextSentence.Tokens.Select(t => t.Text).ToArray());
                    request += $"\nNext sentence is \'{stringRepresentationOfNextSentence}\'.";
                }

                chat.AppendUserInput(request);
                string response = await chat.GetResponseFromChatbotAsync();

                chat = api.Chat.CreateConversation();
                chat.AppendUserInput($"Give me a list of 3 most appropriate synonyms for word \'{SelectedWord.Text}\' in the context of the sentence \'{stringRepresentationOfSentence}\'. Split synonyms by comma. Follow the pattern: \'Synonyms: list of synonyms.\'");
                string synonymsResponse = await chat.GetResponseFromChatbotAsync();

                SelectedWord.Definition = $"{response}";
                SelectedWord.Definition += $"\n{synonymsResponse}";

                Modal.Title = "Definition";
                Modal.TextContent = SelectedWord.Definition;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
            else
            {
                var stringRepresentations = new List<string>(SelectedSentences.Count);
                foreach (Sentence sentence in SelectedSentences)
                {
                    string stringRepresentationOfSentence = String.Join(' ', sentence.Tokens.Select(t => t.Text).ToArray());
                    stringRepresentations.Add(stringRepresentationOfSentence);
                }

                string finalJoin = string.Join('\n', stringRepresentations);

                string content = $"Paraphrase this sentences and use really simple English words:\n\n\'{finalJoin}\'";

                chat.AppendUserInput(content);
                string response = await chat.GetResponseFromChatbotAsync();

                Modal.Title = "Paraphrased version";
                Modal.TextContent = response;
                Modal.ModalType = ModalType.Regular;
                ShowModal = true;
            }
        }
        catch (Exception e)
        {
            Modal.Title = "Error";
            Modal.TextContent = e.Message;
            Modal.ModalType = ModalType.Error;
            ShowModal = true;
        }
        finally
        {
            IsLoading = false;
        }
        
    }

    private bool ShowHistory { get; set; }

    private bool ShowSettings { get; set; }
    public bool IsLoading { get; set; }

}