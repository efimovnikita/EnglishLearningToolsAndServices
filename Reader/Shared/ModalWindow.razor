@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop.Implementation
@using System.Net.Http.Headers
@namespace Reader.Shared
@inject IJSRuntime JsRuntime

@{
    string modalStyle = "absolute bottom-0 left-0 w-full h-full flex justify-center items-center px-[10px]";
    string modalWindowStyle = "bg-[#F9FAFB] w-full rounded-[15px] lg:max-w-[900px] flex flex-col border-[1px]";
    string titleTextStyle = "flex flex-1 justify-center items-center uppercase text-[18px]";
    string closeButtonStyle = "flex justify-center items-center w-[30px] h-[30px] rounded-full";
    string separatorStyle = "h-[1px] w-full border-t-[1px]";
    string contentTextStyle = "scrollbar-thin scrollbar-thumb-[#B4C6FC] scrollbar-track-[#E5EDFF] overflow-auto max-h-[350px] flex w-full text-[18px]";

    if (ModalType == ModalType.Regular)
    {
        modalStyle += " bg-[#D1D5DB]/50";
        modalWindowStyle += " border-[#CDDBFE]";
        titleTextStyle += " text-[#374151]";
        closeButtonStyle += " bg-[#B4C6FC] hover:bg-[#5145CD]";
        separatorStyle += " border-[#CDDBFE]";
        contentTextStyle += " text-[#374151]";
    }

    if (ModalType == ModalType.Warning)
    {
        modalStyle += " bg-[#FDFDEA]/50";
        modalWindowStyle += " border-[#FACA15]";
        titleTextStyle += " text-[#8E4B10]";
        closeButtonStyle += " bg-[#FACA15] hover:bg-[#9F580A]";
        separatorStyle += " border-[#FACA15]";
        contentTextStyle += " text-[#8E4B10]";
    }
    
    if (ModalType == ModalType.Error)
    {
        modalStyle += " bg-[#FDF2F2]/50";
        modalWindowStyle += " border-[#F8B4B4]";
        titleTextStyle += " text-[#771D1D]";
        closeButtonStyle += " bg-[#F98080] hover:bg-[#E02424]";
        separatorStyle += " border-[#F8B4B4]";
        contentTextStyle += " text-[#771D1D]";
    }
}

<div id="modal" class="@modalStyle">
    <div id="modal-window" class="@modalWindowStyle">
        <div id="title" class="flex justify-between p-[5px]">
            <p class="@titleTextStyle">@Title</p>
            @if (this.ModalType == ModalType.Regular && Token != null)
            {
                <div class="flex gap-4">
                    <button @onclick="PlayAudio" class="@closeButtonStyle">
                        <img src="assets/sound.svg" alt="" width="20" height="20"/>
                    </button>
                    <button type="button" @onclick="CloseModal" class="@closeButtonStyle">
                        <img src="assets/cross.svg" alt="" width="15" height="15"/>
                    </button>
                </div>
            }
            else
            {
                <button type="button" @onclick="CloseModal" class="@closeButtonStyle">
                    <img src="assets/cross.svg" alt="" width="15" height="15"/>
                </button>
            }
        </div>
        <div id="separator" class="@separatorStyle"></div>
        <div id="modal-content" class="flex justify-between p-[10px]">
            <p class="@contentTextStyle">@Content</p>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Content { get; set; } = "";

    [Parameter]
    public ModalType ModalType { get; set; } = ModalType.Regular;
    
    [Parameter]
    public Token? Token { get; set; }
    
    [Parameter]
    public string? ElevenLabsApiKey { get; set; }
    
    [Parameter] public EventCallback CloseModal { get; set; }
    
    private async Task PlayAudio()
    {
        try
        {
            if (String.IsNullOrWhiteSpace(ElevenLabsApiKey))
            {
                return;
            }
            
            if (Token == null)
            {
                return;
            }
        
            const string url = "https://api.elevenlabs.io/v1/text-to-speech/EXAVITQu4vr4xnSDxMaL";

            TextToSpeechRequest requestData = new(Token.Text, "eleven_monolingual_v1",
                new VoiceSettings(0.5, 0.5));

            JsonSerializerOptions jsonOptions = new()
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };
            string jsonData = JsonSerializer.Serialize(requestData, jsonOptions);

            using HttpClient client = new();
        
            client.DefaultRequestHeaders.Add("accept", "audio/mpeg");
            client.DefaultRequestHeaders.Add("xi-api-key", this.ElevenLabsApiKey);

            HttpContent content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            HttpResponseMessage response = await client.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                // Read the audio content from the response stream
                byte[] audioData = await response.Content.ReadAsByteArrayAsync();

                // Convert the audio data to a base64-encoded string
                string base64Audio = Convert.ToBase64String(audioData);

                // Invoke JavaScript function to play the audio
                await JsRuntime.InvokeVoidAsync("playAudio", base64Audio);
            }
        }
        catch
        {
            // ignored
        }
    }
}